## ORY Kratos Configuration
#


## Data Source Name ##
#
# Sets the data source name. This configures the backend where ORY Keto persists data. If dsn is "memory", data will be written to memory and is lost when you restart this instance. ORY Hydra supports popular SQL databases. For more detailed configuration information go to: https://www.ory.sh/docs/hydra/dependencies-environment#sql
#
# Examples:
# - postgres://user:password@host:123/database
# - mysql://user:password@tcp(host:123)/database
# - memory
#
# Set this value using environment variables on
# - Linux/macOS:
#    $ export DSN=<value>
# - Windows Command Line (CMD):
#    > set DSN=<value>
#
dsn: memory

## HTTP REST API ##
#
serve:

  ## Port ##
  #
  # The port to listen on.
  #
  # Default value: 4456
  #
  # Examples:
  # - 4456
  #
  # Set this value using environment variables on
  # - Linux/macOS:
  #    $ export SERVE_PORT=<value>
  # - Windows Command Line (CMD):
  #    > set SERVE_PORT=<value>
  #
  port: 4466

  ## Host ##
  #
  # The network interface to listen on.
  #
  # Examples:
  # - localhost
  # - 127.0.0.1
  #
  # Set this value using environment variables on
  # - Linux/macOS:
  #    $ export SERVE_HOST=<value>
  # - Windows Command Line (CMD):
  #    > set SERVE_HOST=<value>
  #
  host: 0.0.0.0

  ## Cross Origin Resource Sharing (CORS) ##
  #
  # Configure [Cross Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/) using the following options.
  #
  cors:

    ## Enable CORS ##
    #
    # If set to true, CORS will be enabled and preflight-requests (OPTION) will be answered.
    #
    # Default value: false
    #
    # Set this value using environment variables on
    # - Linux/macOS:
    #    $ export SERVE_CORS_ENABLED=<value>
    # - Windows Command Line (CMD):
    #    > set SERVE_CORS_ENABLED=<value>
    #
    enabled: false

    ## Allowed Origins ##
    #
    # A list of origins a cross-domain request can be executed from. If the special * value is present in the list, all origins will be allowed. An origin may contain a wildcard (*) to replace 0 or more characters (i.e.: http://*.domain.com). Usage of wildcards implies a small performance penality. Only one wildcard can be used per origin.
    #
    # Default value: *
    #
    # Examples:
    # - - https://example.com
    #   - https://*.example.com
    #   - https://*.foo.example.com
    #
    # Set this value using environment variables on
    # - Linux/macOS:
    #    $ export SERVE_CORS_ALLOWED_ORIGINS=<value>
    # - Windows Command Line (CMD):
    #    > set SERVE_CORS_ALLOWED_ORIGINS=<value>
    #
    allowed_origins:
      - https://example.com
      - https://*.example.com
      - https://*.foo.example.com

    ## Allowed HTTP Methods ##
    #
    # A list of methods the client is allowed to use with cross-domain requests.
    #
    # Default value: GET,POST,PUT,PATCH,DELETE
    #
    # Set this value using environment variables on
    # - Linux/macOS:
    #    $ export SERVE_CORS_ALLOWED_METHODS=<value>
    # - Windows Command Line (CMD):
    #    > set SERVE_CORS_ALLOWED_METHODS=<value>
    #
    allowed_methods:
      - PATCH
      - GET
      - CONNECT
      - POST
      - DELETE

    ## Allowed Request HTTP Headers ##
    #
    # A list of non simple headers the client is allowed to use with cross-domain requests.
    #
    # Default value: Authorization,Content-Type
    #
    # Set this value using environment variables on
    # - Linux/macOS:
    #    $ export SERVE_CORS_ALLOWED_HEADERS=<value>
    # - Windows Command Line (CMD):
    #    > set SERVE_CORS_ALLOWED_HEADERS=<value>
    #
    allowed_headers:
      - in
      - in deserunt
      - reprehenderit

    ## Allowed Response HTTP Headers ##
    #
    # Indicates which headers are safe to expose to the API of a CORS API specification
    #
    # Default value: Content-Type
    #
    # Set this value using environment variables on
    # - Linux/macOS:
    #    $ export SERVE_CORS_EXPOSED_HEADERS=<value>
    # - Windows Command Line (CMD):
    #    > set SERVE_CORS_EXPOSED_HEADERS=<value>
    #
    exposed_headers:
      - est exercitation dolor fugiat laborum
      - sed aliqua non
      - Duis nulla

    ## Allow HTTP Credentials ##
    #
    # Indicates whether the request can include user credentials like cookies, HTTP authentication or client side SSL certificates.
    #
    # Default value: false
    #
    # Set this value using environment variables on
    # - Linux/macOS:
    #    $ export SERVE_CORS_ALLOW_CREDENTIALS=<value>
    # - Windows Command Line (CMD):
    #    > set SERVE_CORS_ALLOW_CREDENTIALS=<value>
    #
    allow_credentials: true

    ## Maximum Age ##
    #
    # Indicates how long (in seconds) the results of a preflight request can be cached. The default is 0 which stands for no max age.
    #
    # Set this value using environment variables on
    # - Linux/macOS:
    #    $ export SERVE_CORS_MAX_AGE=<value>
    # - Windows Command Line (CMD):
    #    > set SERVE_CORS_MAX_AGE=<value>
    #
    max_age: 60979592

    ## Enable Debugging ##
    #
    # Set to true to debug server side CORS issues.
    #
    # Default value: false
    #
    # Set this value using environment variables on
    # - Linux/macOS:
    #    $ export SERVE_CORS_DEBUG=<value>
    # - Windows Command Line (CMD):
    #    > set SERVE_CORS_DEBUG=<value>
    #
    debug: true

## Profiling ##
#
# Enables CPU or memory profiling if set. For more details on profiling Go programs read [Profiling Go Programs](https://blog.golang.org/profiling-go-programs).
#
# Set this value using environment variables on
# - Linux/macOS:
#    $ export PROFILING=<value>
# - Windows Command Line (CMD):
#    > set PROFILING=<value>
#
profiling: ""

## Log ##
#
# Configure logging using the following options. Logging will always be sent to stdout and stderr.
#
log:

  ## Level ##
  #
  # Debug enables stack traces on errors. Can also be set using environment variable LOG_LEVEL.
  #
  # Default value: info
  #
  # Set this value using environment variables on
  # - Linux/macOS:
  #    $ export LOG_LEVEL=<value>
  # - Windows Command Line (CMD):
  #    > set LOG_LEVEL=<value>
  #
  level: info

  ## Format ##
  #
  # The log format can either be text or JSON.
  #
  # Default value: text
  #
  # Set this value using environment variables on
  # - Linux/macOS:
  #    $ export LOG_FORMAT=<value>
  # - Windows Command Line (CMD):
  #    > set LOG_FORMAT=<value>
  #
  format: text
